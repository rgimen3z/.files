# https://gist.github.com/tdd/470582  
[user]
	email = <Your email>
	name = <Your name>
[color]
	# Enable colors in color-supporting terminals
	ui = auto
[push]
	autoSetupRemote = true
[alias]
	# List available aliases
	aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
	# Command shortcuts
	ci = commit
	co = checkout
	st = status
	# Display tree-like log, because default log is a pain…
	lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
	# Useful when you have to update your last commit
	# with staged files without editing the commit message.
	oops = commit --amend --no-edit
	# Ensure that force-pushing won't lose someone else's work (only mine).
	push-with-lease = push --force-with-lease
	# Rebase won’t trigger hooks on each "replayed" commit.
	# This is an ugly hack that will replay each commit during rebase with the
	# standard `commit` command which will trigger hooks.
	rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
	# List local commits that were not pushed to remote repository
	review-local = "!git lg @{push}.."
	# Edit last commit message
	reword = commit --amend
	# Undo last commit but keep changed files in stage
	uncommit = reset --soft HEAD~1
	# Remove file(s) from Git but not from disk
	untrack = rm --cache --
[core]
	# Don't paginate output by default
	# pager = cat
	# Global ignore file (not shared)
	excludesfile = ~/.gitignore_global
	# Global shared hooks directory
	# hooksPath = ~/.githooks
	#
	# Out of luck: on Windows w/o msysGit? You may have Notepad++…
	# editor = 'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin
	# 
	# If you want to use Sublime Text 2's subl wrapper:
	# editor = subl -w
	# 
	# Sublime Text 3 on Windows:
	# editor = 'c:/Program Files/Sublime Text 3/subl.exe' -w
	#
	# VSCode
	editor = code --wait
	# Don't consider trailing space change as a cause for merge conflicts
	whitespace = -trailing-space
	pager = delta
[interactive]
    diffFilter = delta --color-only
[delta]
    navigate = true    # use n and N to move between diff sections
    light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
	decorations = true
    line-numbers = true
    side-by-side = true
    syntax-theme = gruvbox-dark
    whitespace-error-style = 22 reverse
[merge]
    conflictstyle = diff3
[diff]
	# Use better, descriptive initials (c, i, w) instead of a/b.
	mnemonicPrefix = true
	# Show renames/moves as such
	renames = true
	# When using --word-diff, assume --word-diff-regex=.
	wordRegex = .
	# Display submodule-related information (commit listings)
	submodule = log
	# Use VSCode as default diff tool when running `git diff-tool`
	tool = vscode
	# Delta stuff:
	colorMoved = default
[difftool "vscode"]
  	cmd = code --wait --diff $LOCAL $REMOTE
[fetch]
	# Auto-fetch submodule changes (sadly, won't auto-update)
	recurseSubmodules = on-demand
[grep]
	break = true
	heading = true
	lineNumber = true
	# Consider most regexes to be ERE
	extendedRegexp = true
[log]
	# Use abbrev SHAs whenever possible/relevant instead of full 40 chars
	abbrevCommit = true
	# Automatically --follow when given a single path
	follow = true
	# Disable decorate for reflog
	# (because there is no dedicated `reflog` section available)
	decorate = false
[color "branch"]
	# Blue on black is hard to read in git branch -vv: use cyan instead
	upstream = cyan
[tag]
	# Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.
	sort = version:refname
[versionsort]
	prereleaseSuffix = -pre
	prereleaseSuffix = .pre
	prereleaseSuffix = -beta
	prereleaseSuffix = .beta
	prereleaseSuffix = -rc
	prereleaseSuffix = .rc
